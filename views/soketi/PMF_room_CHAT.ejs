<!DOCTYPE html>
<html lang="bs">
<head>
  <title>Chat App</title>
  <style>
    /* General Styles */

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html {
      font-size: 16px;
    }

    input {
      font-size: 14px;
    }

    body {
      line-height: 1.4;
      color: #333333;
      font-family: Helvetica, Arial, sans-serif;
    }

    h1 {
      margin-bottom: 16px;
    }

    label {
      display: block;
      font-size: 14px;
      margin-bottom: 8px;
      color: #777;
    }

    input {
      border: 1px solid #eeeeee;
      padding: 12px;
      outline: none;
    }

    button {
      cursor: pointer;
      padding: 12px;
      background: #1f33be;
      border: none;
      color: white;
      font-size: 16px;
      transition: background .3s ease;
    }

    button:hover {
      background: #1886c4;
    }

    button:disabled {
      cursor: default;
      background: #7c5cbf94;
    }

    /* Join Page Styles */

    .centered-form {
      background: #333744;
      width: 100vw;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .centered-form__box {
      box-shadow: 0px 0px 17px 1px #1D1F26;
      background: #F7F7FA;
      padding: 24px;
      width: 250px;
    }

    .centered-form button {
      width: 100%;
    }

    .centered-form input {
      margin-bottom: 16px;
      width: 100%;
    }

    /* Chat Page Layout */

    .chat {
      display: flex;
    }

    .chat__sidebar {
      height: 100vh;
      color: white;
      background: #333744;
      width: 225px;
    }

    /* Chat styles */

    .chat__main {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      max-height: 100vh;
    }

    .chat__messages {
      flex-grow: 1;
      padding: 24px 24px 0 24px;
      overflow-y: scroll;
    }

    /* Message Styles */

    .message {
      /*margin-bottom: 16px;*/
    }

    .message__name {
      font-weight: 600;
      font-size: 14px;
      margin-right: 8px;
    }

    .message__meta {
      color: #777;
      font-size: 14px;
    }

    .message a {
      color: #0070CC;
    }

    /* Message Composition Styles */

    .compose {
      display: flex;
      flex-shrink: 0;
      margin-top: 16px;
      padding: 24px;
    }

    .compose form {
      display: flex;
      flex-grow: 1;
      margin-right: 16px;
    }

    .compose input {
      border: 1px solid #eeeeee;
      width: 100%;
      padding: 12px;
      margin: 0 16px 0 0;
      flex-grow: 1;
    }

    .compose button {
      font-size: 14px;
    }

    /* Chat Sidebar Styles */

    .room-title {
      font-weight: 400;
      font-size: 22px;
      background: #2c2f3a;
      padding: 24px;
    }

    .list-title {
      font-weight: 500;
      font-size: 18px;
      margin-bottom: 4px;
      padding: 12px 24px 0 24px;
    }

    .users {
      list-style-type: none;
      font-weight: 300;
      padding: 12px 24px 0 24px;
    }
  </style>
</head>
<body>

<div class="chat" >
  <div class="chat__sidebar">
    <h3 style="margin: 10px"> PMF chat room!  </h3>
    <button style="margin: 10px"> Otvori privatne poruke  </button>

  </div>
  <div class="chat__main" >
    <div id="messages"  class="chat__messages">

    </div>

    <div class="compose">
      <form id="message-form">
        <input name="message" id="input" placeholder="Poruka" required autocomplete="off">
        <button id="btn">Pošalji</button>
      </form>
      <button id="send-location">Pošalji lokaciju</button>
    </div>
  </div>
</div>



<script id="message-template" type="text/html">
  <div class="message">
    <p>
      <span class="message__name">{{username}}</span>
      <span class="message__meta">{{createdAt}}</span>
    </p>
    <p>{{mess}}</p>
  </div>
</script>

<script id="location-message-template" type="text/html">
   <div class="message" >
     <p>
       <span class="message__name">{{username}}</span>
       <span class="message__meta">{{createdAt}}</span>
     </p>
     <p><a href="{{lokacija}}" target="_blank">Trenutna lokacija</a></p>
  </div>
</script>

</body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/3.0.1/mustache.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/qs/6.6.0/qs.min.js"></script>
<script src="/socket.io/socket.io.js"></script>

<script>
  function skrolaj_dolje(){
    var element = document.getElementById('messages');
    element.scrollTop = element.scrollHeight;
  }
    const socket = io();
    const messages = document.getElementById('messages');
    // Templates
    const messageTemplate = document.querySelector('#message-template').innerHTML;
    // Options
    const { username, room } = Qs.parse(location.search, { ignoreQueryPrefix: true });

    socket.on('poruka', (mess) => {
      console.log(mess, 'ovdje bug')
      const html = Mustache.render(messageTemplate, {
        username: mess.username,
        mess: mess.text,
        createdAt: moment(mess.createdAt).format('h:mm a')
      })
      messages.insertAdjacentHTML('beforeend', html);
      skrolaj_dolje();
    })


    document.querySelector('#message-form').addEventListener('submit', (e) => {
      e.preventDefault()
      const message = e.target.elements.message.value;
      socket.emit('posaljiPoruku', message);
      console.log(message, 'poruka poslana')
      document.getElementById('input').value = ''
      document.getElementById('input').focus()
    })


    const locationMessageTemplate = document.querySelector('#location-message-template').innerHTML
    socket.on('locationMessage', (mess) => {
      console.log('primam lokaciju', mess)
      const html = Mustache.render(locationMessageTemplate, {
         username: mess.username,
         lokacija: mess.url,
         createdAt: moment(mess.createdAt).format('h:mm a')
      })
      messages.insertAdjacentHTML('beforeend', html);
      skrolaj_dolje();
    })

    const sendLocationButton = document.querySelector('#send-location')
    sendLocationButton.addEventListener('click', () => {
      if (!navigator.geolocation) {
        return alert('Geolocation is not supported by your browser.')
      }

      // $sendLocationButton.setAttribute('disabled', 'disabled')

      navigator.geolocation.getCurrentPosition((position) => {
        socket.emit('sendLocation', {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude
        }, )
      })
    });



    socket.emit('join', { username, room });
    console.log(username, room)

</script>
</html>


<!--
// tut 5.ejs
<button id="increment"> +1 </button>

    socket.on('countUpdated', (count) => {
      console.log('The count has been updated!', count)
    })

    document.querySelector('#increment').addEventListener('click', () => {
      console.log('Clicked')
      socket.emit('increment')
    })

-->

<!--
// tut 6.ejs
<form id="message-form">
      <input name="message" placeholder="Message">
      <button>Send</button>
    </form>

socket.on('poruka', (mess) =>{
      console.log(mess)
    })


    document.querySelector('#message-form').addEventListener('submit', (e) => {
      e.preventDefault()

      const message = e.target.elements.message.value

      socket.emit('posaljiPoruku', message)
    })
-->

<!-- 7.tut navigator
document.querySelector('#send-location').addEventListener('click', () => {
    if (!navigator.geolocation) {
        return alert('Geolocation is not supported by your browser.')
    }

    navigator.geolocation.getCurrentPosition((position) => {
        socket.emit('sendLocation', {
            latitude: position.coords.latitude,
            longitude: position.coords.longitude
        })
    })
})
-->